싱글 스레드 vs 멀티 스레드

싱글 스레드는 하나의 명령어가 **단일 순서**로 실행된다. 즉, 한 명령은 한 번에 처리된다.

멀티 스레드는 프로그램의 여러 부분을 **동시에** 실행할 수 있다.



멀티 스레드 구현

 사용자 수준 스레드와 커널 수준의 스레드로 구현된다. 

 사용자 수준의 스레드는 사용자가 구현하며 커널 스레드는 유저 스레드를 알지 못한다. 그러므로 커널 스레드는 사용자 수준 스레드의 동기화는 커널 스레드가 책임지지 않고 커널보다 더 작고 빠릅니다. 또한, 커널 수준의 스레드가 사용자 수준의 스레드를 알지 못하므로 단일 스레드 프로세스인 것처럼 처리한다.

 커널 수준의 스레드

 커널 수준의 스레드는 OS에 의해 handle 되고 커널 수준의 스레드 관리는 커널이 한다. 프로세스 및 쓰레드의 관리는 모두 커널이 하기 때문에 커널 수준의 스레드는 사용자 수준의 스레드보다 늦을 수 밖에 ㅇ벗다.



멀티 스레드의 장점

 쓰레드 공유 메모리가 존재하며 프로그램의 응답성이 좋아진다. 한번에 한 프로세스 또는 스레드만 프로세서에서 실행될 수 있기 때문에 여러 스레드를 동시에 실행할 수 있다. 그러므로 시스템의 동시성이 증가한다.



멀티 스레드의 단점

 복잡하고 동시성 이슈를 관리해주기 쉽지 않다. 디버그 어려움, Data Race 발생할 수 있다.



**Data Race**

- 원인
  - 공유 메모리를 여러 스레드에서 읽고 쓴다
  - 읽고 쓰는 순서에 따라 실행결과가 달라진다. (프로그래머가 예상 못한 결과가 발생)
  - 이것을 Data Race라고 한다. 
- Data Race의 정의
  - 복수개의 스레드가 하나의 메모리에 동시 접근
  - 적어도 한 개는 write



 **병렬 프로그램 요구사항**

- 정확성

  - 여러 흐름(Context)에서 동시다발적으로 호출해도 문제 없이 실행되는 알고리즘이 필요. 
  - 오류가 발생하면 모든 것이 의미 없음.

- 성능

  - Context 증가에 따른 성능 향상이 높아야 한다.
  - 기존 직렬 프로그램보다 느려질 수 있다.

  

정확성? 프로그램에는 오류가 있으면 안된다. 하지만 적어놓은 이유는 정확성을 지키는 것이 어렵기 때문이다.

성능? 왜 멀티스레드를 써야하는가. 성능 때문에 써야 한다. 

CPU가 느리기 때문에 멀티스레드 프로그래밍을 해야한다. CPU가 느린 것과 프로그램하고 무슨 상관이냐? 게임은 성능이 중요하기 때문에 상관이 있다. 게임이 느리거나, 프로그램이 느리다면 어떡해야 하는가? 멀티스레드 프로그래밍을 한다? 아니다. **멀티스레드 프로그래밍은 최후의 마지막 수단이다.**

 

**성능 개선을 먼저 해야한다.** 자료구조에서 배운 알고리즘을 봐서 성능개선을 하고, 원하는 속도가 나오면 거기서 멈추고 다른 것을 하면 된다. 그런데, 그래도 안됐을 때 멀티스레드를 시도할지 고민해야 한다. 이때 무엇을 보아야 하는가?

 

느린 원인이 I/O 때문에 느릴 수 있다. 특히 게임 서버는 네트워크 I/O를 하고, 3D 그래픽은 GPU I/O를 한다. 이렇게 I/O 때문에 성능이 안 나온다? 그렇다면 멀티스레드가 아닌 I/O최적화를 해야 한다.

하드디스크 액세스 때문에 성능이 안 나온다? 그렇다면 하드디스크 접근 횟수를 줄여야 한다. 그리고 하드디스크로 주고받는 데이터의 사이즈를 줄여야 한다.

네트워크 때문에 느리다? 그럼 I/O 최적화를 해야 한다. 여기서 많이 쓰는 기법이 비동기 I/O이다.

 

**느린 원인이 CPU다? 그러면 이제 멀티스레드 프로그래밍을 해야 한다.**

 

그런데, 느린 원인이 I/O인지, CPU인지 어떻게 아는가?

작업 관리자를 켰을 때 세부 정보에서 실행파일이 CPU를 몇 % 나 활용하나 보자. 100% 활용하고 있다? 그럼 CPU가 문제이다. CPU는 놀고 있는데 컴퓨터가 느리다면, 프로그램에 버그가 있거나 I/O에 문제가 있는 것이다.

 

100%라는 것은 i7이면 4개의 코어를 다 쓰고 있다는 것인데 이게 아니다. 싱글코어 프로그램이 4개의 코어를 다 쓸 리가 없다. 아무리 많이 써도 25%. CPU 사용량이 25%라면 그것은 100% 쓰고 있다는 것이다. 

 

정확성과 성능. 이 둘 중 하나라도 안되면 멀티스레드 프로그래밍을 하는 이유가 하나도 없다. 



Windows는 멀티스레드로 구현되어 있다 Linux는 2000년대 초반까지 멀티스레드를 지원하지 않았다. 지금도 존재하지 않는다 Thread처럼 행동하는 Process를 옵션으로 만들 수 있다.



https://www.tutorialspoint.com/single-threaded-and-multi-threaded-processes

출처: https://popcorntree.tistory.com/1?category=813523 [어떤 프로그래머]

